// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (constant_id = 0) const int bias_term = 0;
layout (constant_id = 1) const int activation_type = 0;
layout (constant_id = 2) const float activation_param_0 = 0;
layout (constant_id = 3) const float activation_param_1 = 0;

#define shape_constant_id_offset 4
layout (constant_id = shape_constant_id_offset + 0) const int c = 0;
layout (constant_id = shape_constant_id_offset + 1) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 2) const int block_x = 0;
layout (constant_id = shape_constant_id_offset + 3) const int block_y = 0;

layout (constant_id = shape_constant_id_offset + 4) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 5) const int outh = 0;
layout (constant_id = shape_constant_id_offset + 6) const int outcstep = 0;

#if NCNN_image_shader
layout (binding = 0) uniform unfp sampler3D top_tm_blob;
layout (binding = 1, imfmtc4) writeonly uniform unfp image3D top_blob;
layout (binding = 2) uniform unfp sampler3D bias_blob;
#else
layout (binding = 0) readonly buffer top_tm_blob { sfpvec4 top_tm_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfpvec4 top_blob_data[]; };
layout (binding = 2) readonly buffer bias_blob { sfpvec4 bias_data[]; };
#endif

layout (push_constant) uniform parameter
{
    int c;
    int cstep;

    int block_x;
    int block_y;

    int outw;
    int outh;
    int outcstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= p.block_x || gy >= p.block_y || gz >= psc(c))
        return;

    // load 36
#if NCNN_image_shader
    int sy = gy * p.block_x + gx;

    afpvec4 v00 = image3d_ld4(top_tm_blob, ivec3(0, sy, gz));
    afpvec4 v01 = image3d_ld4(top_tm_blob, ivec3(1, sy, gz));
    afpvec4 v02 = image3d_ld4(top_tm_blob, ivec3(2, sy, gz));
    afpvec4 v03 = image3d_ld4(top_tm_blob, ivec3(3, sy, gz));
    afpvec4 v04 = image3d_ld4(top_tm_blob, ivec3(4, sy, gz));
    afpvec4 v05 = image3d_ld4(top_tm_blob, ivec3(5, sy, gz));
    afpvec4 v10 = image3d_ld4(top_tm_blob, ivec3(6, sy, gz));
    afpvec4 v11 = image3d_ld4(top_tm_blob, ivec3(7, sy, gz));
    afpvec4 v12 = image3d_ld4(top_tm_blob, ivec3(8, sy, gz));
    afpvec4 v13 = image3d_ld4(top_tm_blob, ivec3(9, sy, gz));
    afpvec4 v14 = image3d_ld4(top_tm_blob, ivec3(10, sy, gz));
    afpvec4 v15 = image3d_ld4(top_tm_blob, ivec3(11, sy, gz));
    afpvec4 v20 = image3d_ld4(top_tm_blob, ivec3(12, sy, gz));
    afpvec4 v21 = image3d_ld4(top_tm_blob, ivec3(13, sy, gz));
    afpvec4 v22 = image3d_ld4(top_tm_blob, ivec3(14, sy, gz));
    afpvec4 v23 = image3d_ld4(top_tm_blob, ivec3(15, sy, gz));
    afpvec4 v24 = image3d_ld4(top_tm_blob, ivec3(16, sy, gz));
    afpvec4 v25 = image3d_ld4(top_tm_blob, ivec3(17, sy, gz));
    afpvec4 v30 = image3d_ld4(top_tm_blob, ivec3(18, sy, gz));
    afpvec4 v31 = image3d_ld4(top_tm_blob, ivec3(19, sy, gz));
    afpvec4 v32 = image3d_ld4(top_tm_blob, ivec3(20, sy, gz));
    afpvec4 v33 = image3d_ld4(top_tm_blob, ivec3(21, sy, gz));
    afpvec4 v34 = image3d_ld4(top_tm_blob, ivec3(22, sy, gz));
    afpvec4 v35 = image3d_ld4(top_tm_blob, ivec3(23, sy, gz));
    afpvec4 v40 = image3d_ld4(top_tm_blob, ivec3(24, sy, gz));
    afpvec4 v41 = image3d_ld4(top_tm_blob, ivec3(25, sy, gz));
    afpvec4 v42 = image3d_ld4(top_tm_blob, ivec3(26, sy, gz));
    afpvec4 v43 = image3d_ld4(top_tm_blob, ivec3(27, sy, gz));
    afpvec4 v44 = image3d_ld4(top_tm_blob, ivec3(28, sy, gz));
    afpvec4 v45 = image3d_ld4(top_tm_blob, ivec3(29, sy, gz));
    afpvec4 v50 = image3d_ld4(top_tm_blob, ivec3(30, sy, gz));
    afpvec4 v51 = image3d_ld4(top_tm_blob, ivec3(31, sy, gz));
    afpvec4 v52 = image3d_ld4(top_tm_blob, ivec3(32, sy, gz));
    afpvec4 v53 = image3d_ld4(top_tm_blob, ivec3(33, sy, gz));
    afpvec4 v54 = image3d_ld4(top_tm_blob, ivec3(34, sy, gz));
    afpvec4 v55 = image3d_ld4(top_tm_blob, ivec3(35, sy, gz));
#else
    int v_tm_offset = gz * psc(cstep) + (gy * p.block_x + gx) * 36;

    afpvec4 v00 = buffer_ld4(top_tm_blob_data, v_tm_offset + 0);
    afpvec4 v01 = buffer_ld4(top_tm_blob_data, v_tm_offset + 1);
    afpvec4 v02 = buffer_ld4(top_tm_blob_data, v_tm_offset + 2);
    afpvec4 v03 = buffer_ld4(top_tm_blob_data, v_tm_offset + 3);
    afpvec4 v04 = buffer_ld4(top_tm_blob_data, v_tm_offset + 4);
    afpvec4 v05 = buffer_ld4(top_tm_blob_data, v_tm_offset + 5);
    afpvec4 v10 = buffer_ld4(top_tm_blob_data, v_tm_offset + 6);
    afpvec4 v11 = buffer_ld4(top_tm_blob_data, v_tm_offset + 7);
    afpvec4 v12 = buffer_ld4(top_tm_blob_data, v_tm_offset + 8);
    afpvec4 v13 = buffer_ld4(top_tm_blob_data, v_tm_offset + 9);
    afpvec4 v14 = buffer_ld4(top_tm_blob_data, v_tm_offset + 10);
    afpvec4 v15 = buffer_ld4(top_tm_blob_data, v_tm_offset + 11);
    afpvec4 v20 = buffer_ld4(top_tm_blob_data, v_tm_offset + 12);
    afpvec4 v21 = buffer_ld4(top_tm_blob_data, v_tm_offset + 13);
    afpvec4 v22 = buffer_ld4(top_tm_blob_data, v_tm_offset + 14);
    afpvec4 v23 = buffer_ld4(top_tm_blob_data, v_tm_offset + 15);
    afpvec4 v24 = buffer_ld4(top_tm_blob_data, v_tm_offset + 16);
    afpvec4 v25 = buffer_ld4(top_tm_blob_data, v_tm_offset + 17);
    afpvec4 v30 = buffer_ld4(top_tm_blob_data, v_tm_offset + 18);
    afpvec4 v31 = buffer_ld4(top_tm_blob_data, v_tm_offset + 19);
    afpvec4 v32 = buffer_ld4(top_tm_blob_data, v_tm_offset + 20);
    afpvec4 v33 = buffer_ld4(top_tm_blob_data, v_tm_offset + 21);
    afpvec4 v34 = buffer_ld4(top_tm_blob_data, v_tm_offset + 22);
    afpvec4 v35 = buffer_ld4(top_tm_blob_data, v_tm_offset + 23);
    afpvec4 v40 = buffer_ld4(top_tm_blob_data, v_tm_offset + 24);
    afpvec4 v41 = buffer_ld4(top_tm_blob_data, v_tm_offset + 25);
    afpvec4 v42 = buffer_ld4(top_tm_blob_data, v_tm_offset + 26);
    afpvec4 v43 = buffer_ld4(top_tm_blob_data, v_tm_offset + 27);
    afpvec4 v44 = buffer_ld4(top_tm_blob_data, v_tm_offset + 28);
    afpvec4 v45 = buffer_ld4(top_tm_blob_data, v_tm_offset + 29);
    afpvec4 v50 = buffer_ld4(top_tm_blob_data, v_tm_offset + 30);
    afpvec4 v51 = buffer_ld4(top_tm_blob_data, v_tm_offset + 31);
    afpvec4 v52 = buffer_ld4(top_tm_blob_data, v_tm_offset + 32);
    afpvec4 v53 = buffer_ld4(top_tm_blob_data, v_tm_offset + 33);
    afpvec4 v54 = buffer_ld4(top_tm_blob_data, v_tm_offset + 34);
    afpvec4 v55 = buffer_ld4(top_tm_blob_data, v_tm_offset + 35);
#endif

    // const float otm[4][6] = {
    //     {1.0f, 1.0f,  1.0f, 1.0f,  1.0f, 0.0f},
    //     {0.0f, 1.0f, -1.0f, 2.0f, -2.0f, 0.0f},
    //     {0.0f, 1.0f,  1.0f, 4.0f,  4.0f, 0.0f},
    //     {0.0f, 1.0f, -1.0f, 8.0f, -8.0f, 1.0f}
    // };

    // 0 = r00 + (r01 + r02) + (r03 + r04)
    // 1 =       (r01 - r02) + (r03 - r04) * 2
    // 2 =       (r01 + r02) + (r03 + r04) * 4
    // 3 = r05 + (r01 - r02) + (r03 - r04) * 8

    // implicit transpose
    afpvec4 m00 = v00 + (v01 + v02) + (v03 + v04);
    afpvec4 m01 = v10 + (v11 + v12) + (v13 + v14);
    afpvec4 m02 = v20 + (v21 + v22) + (v23 + v24);
    afpvec4 m03 = v30 + (v31 + v32) + (v33 + v34);
    afpvec4 m04 = v40 + (v41 + v42) + (v43 + v44);
    afpvec4 m05 = v50 + (v51 + v52) + (v53 + v54);

    afpvec4 m10 = (v01 - v02) + (v03 - v04) * afp(2);
    afpvec4 m11 = (v11 - v12) + (v13 - v14) * afp(2);
    afpvec4 m12 = (v21 - v22) + (v23 - v24) * afp(2);
    afpvec4 m13 = (v31 - v32) + (v33 - v34) * afp(2);
    afpvec4 m14 = (v41 - v42) + (v43 - v44) * afp(2);
    afpvec4 m15 = (v51 - v52) + (v53 - v54) * afp(2);

    afpvec4 m20 = (v01 + v02) + (v03 + v04) * afp(4);
    afpvec4 m21 = (v11 + v12) + (v13 + v14) * afp(4);
    afpvec4 m22 = (v21 + v22) + (v23 + v24) * afp(4);
    afpvec4 m23 = (v31 + v32) + (v33 + v34) * afp(4);
    afpvec4 m24 = (v41 + v42) + (v43 + v44) * afp(4);
    afpvec4 m25 = (v51 + v52) + (v53 + v54) * afp(4);

    afpvec4 m30 = v05 + (v01 - v02) + (v03 - v04) * afp(8);
    afpvec4 m31 = v15 + (v11 - v12) + (v13 - v14) * afp(8);
    afpvec4 m32 = v25 + (v21 - v22) + (v23 - v24) * afp(8);
    afpvec4 m33 = v35 + (v31 - v32) + (v33 - v34) * afp(8);
    afpvec4 m34 = v45 + (v41 - v42) + (v43 - v44) * afp(8);
    afpvec4 m35 = v55 + (v51 - v52) + (v53 - v54) * afp(8);

    v00 = m00 + (m01 + m02) + (m03 + m04);
    v10 = m10 + (m11 + m12) + (m13 + m14);
    v20 = m20 + (m21 + m22) + (m23 + m24);
    v30 = m30 + (m31 + m32) + (m33 + m34);

    v01 = (m01 - m02) + (m03 - m04) * afp(2);
    v11 = (m11 - m12) + (m13 - m14) * afp(2);
    v21 = (m21 - m22) + (m23 - m24) * afp(2);
    v31 = (m31 - m32) + (m33 - m34) * afp(2);

    v02 = (m01 + m02) + (m03 + m04) * afp(4);
    v12 = (m11 + m12) + (m13 + m14) * afp(4);
    v22 = (m21 + m22) + (m23 + m24) * afp(4);
    v32 = (m31 + m32) + (m33 + m34) * afp(4);

    v03 = m05 + (m01 - m02) + (m03 - m04) * afp(8);
    v13 = m15 + (m11 - m12) + (m13 - m14) * afp(8);
    v23 = m25 + (m21 - m22) + (m23 - m24) * afp(8);
    v33 = m35 + (m31 - m32) + (m33 - m34) * afp(8);

    if (bias_term == 1)
    {
#if NCNN_image_shader
        const afpvec4 bias_value = image3d_ld4(bias_blob, ivec3(gz, 0, 0));
#else
        const afpvec4 bias_value = buffer_ld4(bias_data, gz);
#endif

        v00 = bias_value + v00;
        v01 = bias_value + v01;
        v02 = bias_value + v02;
        v03 = bias_value + v03;
        v10 = bias_value + v10;
        v11 = bias_value + v11;
        v12 = bias_value + v12;
        v13 = bias_value + v13;
        v20 = bias_value + v20;
        v21 = bias_value + v21;
        v22 = bias_value + v22;
        v23 = bias_value + v23;
        v30 = bias_value + v30;
        v31 = bias_value + v31;
        v32 = bias_value + v32;
        v33 = bias_value + v33;
    }

    if (activation_type == 1)
    {
        v00 = max(v00, afp(0.f));
        v01 = max(v01, afp(0.f));
        v02 = max(v02, afp(0.f));
        v03 = max(v03, afp(0.f));
        v10 = max(v10, afp(0.f));
        v11 = max(v11, afp(0.f));
        v12 = max(v12, afp(0.f));
        v13 = max(v13, afp(0.f));
        v20 = max(v20, afp(0.f));
        v21 = max(v21, afp(0.f));
        v22 = max(v22, afp(0.f));
        v23 = max(v23, afp(0.f));
        v30 = max(v30, afp(0.f));
        v31 = max(v31, afp(0.f));
        v32 = max(v32, afp(0.f));
        v33 = max(v33, afp(0.f));
    }
    if (activation_type == 2)
    {
        const afp slope = afp(activation_param_0);
        v00 = mix(v00, v00 * afp(slope), lessThan(v00, afpvec4(0.f)));
        v01 = mix(v01, v01 * afp(slope), lessThan(v01, afpvec4(0.f)));
        v02 = mix(v02, v02 * afp(slope), lessThan(v02, afpvec4(0.f)));
        v03 = mix(v03, v03 * afp(slope), lessThan(v03, afpvec4(0.f)));
        v10 = mix(v10, v10 * afp(slope), lessThan(v10, afpvec4(0.f)));
        v11 = mix(v11, v11 * afp(slope), lessThan(v11, afpvec4(0.f)));
        v12 = mix(v12, v12 * afp(slope), lessThan(v12, afpvec4(0.f)));
        v13 = mix(v13, v13 * afp(slope), lessThan(v13, afpvec4(0.f)));
        v20 = mix(v20, v20 * afp(slope), lessThan(v20, afpvec4(0.f)));
        v21 = mix(v21, v21 * afp(slope), lessThan(v21, afpvec4(0.f)));
        v22 = mix(v22, v22 * afp(slope), lessThan(v22, afpvec4(0.f)));
        v23 = mix(v23, v23 * afp(slope), lessThan(v23, afpvec4(0.f)));
        v30 = mix(v30, v30 * afp(slope), lessThan(v30, afpvec4(0.f)));
        v31 = mix(v31, v31 * afp(slope), lessThan(v31, afpvec4(0.f)));
        v32 = mix(v32, v32 * afp(slope), lessThan(v32, afpvec4(0.f)));
        v33 = mix(v33, v33 * afp(slope), lessThan(v33, afpvec4(0.f)));
    }
    if (activation_type == 3)
    {
        const afp const_min = afp(activation_param_0);
        const afp const_max = afp(activation_param_1);
        v00 = clamp(v00, const_min, const_max);
        v01 = clamp(v01, const_min, const_max);
        v02 = clamp(v02, const_min, const_max);
        v03 = clamp(v03, const_min, const_max);
        v10 = clamp(v10, const_min, const_max);
        v11 = clamp(v11, const_min, const_max);
        v12 = clamp(v12, const_min, const_max);
        v13 = clamp(v13, const_min, const_max);
        v20 = clamp(v20, const_min, const_max);
        v21 = clamp(v21, const_min, const_max);
        v22 = clamp(v22, const_min, const_max);
        v23 = clamp(v23, const_min, const_max);
        v30 = clamp(v30, const_min, const_max);
        v31 = clamp(v31, const_min, const_max);
        v32 = clamp(v32, const_min, const_max);
        v33 = clamp(v33, const_min, const_max);
    }
    if (activation_type == 4)
    {
        v00 = afp(1.f) / (afp(1.f) + exp(-v00));
        v01 = afp(1.f) / (afp(1.f) + exp(-v01));
        v02 = afp(1.f) / (afp(1.f) + exp(-v02));
        v03 = afp(1.f) / (afp(1.f) + exp(-v03));
        v10 = afp(1.f) / (afp(1.f) + exp(-v10));
        v11 = afp(1.f) / (afp(1.f) + exp(-v11));
        v12 = afp(1.f) / (afp(1.f) + exp(-v12));
        v13 = afp(1.f) / (afp(1.f) + exp(-v13));
        v20 = afp(1.f) / (afp(1.f) + exp(-v20));
        v21 = afp(1.f) / (afp(1.f) + exp(-v21));
        v22 = afp(1.f) / (afp(1.f) + exp(-v22));
        v23 = afp(1.f) / (afp(1.f) + exp(-v23));
        v30 = afp(1.f) / (afp(1.f) + exp(-v30));
        v31 = afp(1.f) / (afp(1.f) + exp(-v31));
        v32 = afp(1.f) / (afp(1.f) + exp(-v32));
        v33 = afp(1.f) / (afp(1.f) + exp(-v33));
    }
    if (activation_type == 5)
    {
        v00 = v00 * tanh(log(exp(v00) + afp(1.f)));
        v01 = v01 * tanh(log(exp(v01) + afp(1.f)));
        v02 = v02 * tanh(log(exp(v02) + afp(1.f)));
        v03 = v03 * tanh(log(exp(v03) + afp(1.f)));
        v10 = v10 * tanh(log(exp(v10) + afp(1.f)));
        v11 = v11 * tanh(log(exp(v11) + afp(1.f)));
        v12 = v12 * tanh(log(exp(v12) + afp(1.f)));
        v13 = v13 * tanh(log(exp(v13) + afp(1.f)));
        v20 = v20 * tanh(log(exp(v20) + afp(1.f)));
        v21 = v21 * tanh(log(exp(v21) + afp(1.f)));
        v22 = v22 * tanh(log(exp(v22) + afp(1.f)));
        v23 = v23 * tanh(log(exp(v23) + afp(1.f)));
        v30 = v30 * tanh(log(exp(v30) + afp(1.f)));
        v31 = v31 * tanh(log(exp(v31) + afp(1.f)));
        v32 = v32 * tanh(log(exp(v32) + afp(1.f)));
        v33 = v33 * tanh(log(exp(v33) + afp(1.f)));
    }
    if (activation_type == 6)
    {
        const afp alpha = afp(activation_param_0);
        const afp beta = afp(activation_param_1);
        v00 = v00 * clamp(v00 * afp(alpha) + afp(beta), afp(0.f), afp(1.f));
        v01 = v01 * clamp(v01 * afp(alpha) + afp(beta), afp(0.f), afp(1.f));
        v02 = v02 * clamp(v02 * afp(alpha) + afp(beta), afp(0.f), afp(1.f));
        v03 = v03 * clamp(v03 * afp(alpha) + afp(beta), afp(0.f), afp(1.f));
        v10 = v10 * clamp(v10 * afp(alpha) + afp(beta), afp(0.f), afp(1.f));
        v11 = v11 * clamp(v11 * afp(alpha) + afp(beta), afp(0.f), afp(1.f));
        v12 = v12 * clamp(v12 * afp(alpha) + afp(beta), afp(0.f), afp(1.f));
        v13 = v13 * clamp(v13 * afp(alpha) + afp(beta), afp(0.f), afp(1.f));
        v20 = v20 * clamp(v20 * afp(alpha) + afp(beta), afp(0.f), afp(1.f));
        v21 = v21 * clamp(v21 * afp(alpha) + afp(beta), afp(0.f), afp(1.f));
        v22 = v22 * clamp(v22 * afp(alpha) + afp(beta), afp(0.f), afp(1.f));
        v23 = v23 * clamp(v23 * afp(alpha) + afp(beta), afp(0.f), afp(1.f));
        v30 = v30 * clamp(v30 * afp(alpha) + afp(beta), afp(0.f), afp(1.f));
        v31 = v31 * clamp(v31 * afp(alpha) + afp(beta), afp(0.f), afp(1.f));
        v32 = v32 * clamp(v32 * afp(alpha) + afp(beta), afp(0.f), afp(1.f));
        v33 = v33 * clamp(v33 * afp(alpha) + afp(beta), afp(0.f), afp(1.f));
    }

    // store 4x4
#if NCNN_image_shader
    int x = gx * 4;
    int y = gy * 4;

    image3d_st4(top_blob, ivec3(x, y, gz), v00);
    image3d_st4(top_blob, ivec3(x + 1, y, gz), v01);
    image3d_st4(top_blob, ivec3(x + 2, y, gz), v02);
    image3d_st4(top_blob, ivec3(x + 3, y, gz), v03);
    image3d_st4(top_blob, ivec3(x, y + 1, gz), v10);
    image3d_st4(top_blob, ivec3(x + 1, y + 1, gz), v11);
    image3d_st4(top_blob, ivec3(x + 2, y + 1, gz), v12);
    image3d_st4(top_blob, ivec3(x + 3, y + 1, gz), v13);
    image3d_st4(top_blob, ivec3(x, y + 2, gz), v20);
    image3d_st4(top_blob, ivec3(x + 1, y + 2, gz), v21);
    image3d_st4(top_blob, ivec3(x + 2, y + 2, gz), v22);
    image3d_st4(top_blob, ivec3(x + 3, y + 2, gz), v23);
    image3d_st4(top_blob, ivec3(x, y + 3, gz), v30);
    image3d_st4(top_blob, ivec3(x + 1, y + 3, gz), v31);
    image3d_st4(top_blob, ivec3(x + 2, y + 3, gz), v32);
    image3d_st4(top_blob, ivec3(x + 3, y + 3, gz), v33);
#else
    ivec4 v_offset = gz * psc(outcstep) + gy * 4 * psc(outw) + gx * 4 + ivec4(0, 1, 2, 3) * psc(outw);

    buffer_st4(top_blob_data, v_offset.r + 0, v00);
    buffer_st4(top_blob_data, v_offset.r + 1, v01);
    buffer_st4(top_blob_data, v_offset.r + 2, v02);
    buffer_st4(top_blob_data, v_offset.r + 3, v03);
    buffer_st4(top_blob_data, v_offset.g + 0, v10);
    buffer_st4(top_blob_data, v_offset.g + 1, v11);
    buffer_st4(top_blob_data, v_offset.g + 2, v12);
    buffer_st4(top_blob_data, v_offset.g + 3, v13);
    buffer_st4(top_blob_data, v_offset.b + 0, v20);
    buffer_st4(top_blob_data, v_offset.b + 1, v21);
    buffer_st4(top_blob_data, v_offset.b + 2, v22);
    buffer_st4(top_blob_data, v_offset.b + 3, v23);
    buffer_st4(top_blob_data, v_offset.a + 0, v30);
    buffer_st4(top_blob_data, v_offset.a + 1, v31);
    buffer_st4(top_blob_data, v_offset.a + 2, v32);
    buffer_st4(top_blob_data, v_offset.a + 3, v33);
#endif
}
